---
swagger: "2.0"
info:
  version: "1.0.0"
  title: "Task API"
host: "kpp6zrebs6.execute-api.us-east-1.amazonaws.com"
basePath: "/prod"
schemes:
- "https"
paths:
  /DailyEmailLambda:
    x-amazon-apigateway-any-method:
      responses:
        200:
          description: "200 response"
      security:
      - sigv4: []
      x-amazon-apigateway-integration:
        responses:
          .*:
            statusCode: "200"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:550632464207:function:DailyEmailLambda/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /deleteTaskLambda:
    x-amazon-apigateway-any-method:
      responses:
        200:
          description: "200 response"
      security:
      - sigv4: []
      x-amazon-apigateway-integration:
        responses:
          .*:
            statusCode: "200"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:550632464207:function:deleteTaskLambda/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /getTasksLambda:
    x-amazon-apigateway-any-method:
      responses:
        200:
          description: "200 response"
      security:
      - sigv4: []
      x-amazon-apigateway-integration:
        responses:
          .*:
            statusCode: "200"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:550632464207:function:getTasksLambda/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /postTaskLambda:
    x-amazon-apigateway-any-method:
      responses:
        200:
          description: "200 response"
      security:
      - sigv4: []
      x-amazon-apigateway-integration:
        responses:
          .*:
            statusCode: "200"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:550632464207:function:postTaskLambda/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /putTaskLambda:
    x-amazon-apigateway-any-method:
      responses:
        200:
          description: "200 response"
      security:
      - sigv4: []
      x-amazon-apigateway-integration:
        responses:
          .*:
            statusCode: "200"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:550632464207:function:putTaskLambda/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /tasks:
    get:
      operationId: "getTasks"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Task"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"user\" :\
            \ \"foo\",\n  \"description\" : \"foo\",\n  \"priority\" : 42,\n  \"completed\"\
            \ : \"foo\"\n}"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:550632464207:function:getTasksLambda/invocations"
        passthroughBehavior: "never"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    post:
      operationId: "saveTask"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "Task"
        required: true
        schema:
          $ref: "#/definitions/Task"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Task"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:550632464207:function:postTaskLambda/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    put:
      operationId: "updateTask"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "Task"
        required: true
        schema:
          $ref: "#/definitions/Task"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Task"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:550632464207:function:putTaskLambda/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    delete:
      operationId: "deleteTask"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:550632464207:function:deleteTaskLambda/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
securityDefinitions:
  sigv4:
    type: "apiKey"
    name: "Authorization"
    in: "header"
    x-amazon-apigateway-authtype: "awsSigv4"
definitions:
  Task:
    type: "object"
    required:
    - "description"
    - "priority"
    properties:
      user:
        type: "string"
        description: "User's email address"
        title: "User"
        minLength: 5
        maxLength: 254
      description:
        type: "string"
        title: "Description of the task"
        minLength: 1
      priority:
        type: "integer"
        description: "Task priority, as a single-digit integer. 0 is highest priority"
        title: "Priority"
        minimum: 0.0
        maximum: 9.0
      completed:
        type: "string"
        format: "date-time"
        description: "Completed datetime, formatted as an ISO8601 string"
        title: "Completed"
  Error:
    type: "object"
    required:
    - "errorMessage"
    properties:
      errorMessage:
        type: "string"
